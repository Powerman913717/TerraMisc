buildscript {
    repositories {
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "0.14.6"
group= "TerraMisc"
archivesBaseName = "TFCM"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

repositories {
    maven {
        // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
}

dependencies {
    // Forcing version numbers for everything and using NO-NEI WAILA since the "transitive dependency resolution (gradle magic)" is currently borked.
    compile "codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.127:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.4.95:dev"
    compile "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.build.dependsOn('sourcesJar', 'deobfJar')

task sourcesJar(type: Jar) {
    from "LICENSE.txt"
    from sourceSets.main.allSource
    classifier = 'src'
    appendix = project.minecraft.version
}

task deobfJar(type: Jar) {
    from "LICENSE.txt"
    from sourceSets.main.output
    from (sourceSets.main.allSource.srcDirs) {
        include '**/*.java'
    }
    classifier = 'deobf'
    appendix = project.minecraft.version
}

jar {
    from "LICENSE.txt"
    appendix = project.minecraft.version
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}